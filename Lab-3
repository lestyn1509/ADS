#include <bits/stdc++.h>
using namespace std;

// Class to implement node
class Node
{
public:
int key;

// Array to hold pointers to node of different level
Node **forward;
Node(int, int);
};

Node::Node(int key, int level)
{
this->key = key;

// Allocate memory to forward
forward = new Node*[level+1];

// Fill forward array with 0(NULL)
memset(forward, 0, sizeof(Node*)*(level+1));
};

// Class for Skip list
class SkipList
{
// Maximum level for this skip list
int MAXLVL;

// P is the fraction of the nodes with level
// i pointers also having level i+1 pointers
float P;

// current level of skip list
int level;

// pointer to header node
Node *header;
public:
SkipList(int, float);
int randomLevel();
Node* createNode(int, int);
void insertElement(int);
void deleteElement(int);
void searchElement(int);
void displayList();
};

SkipList::SkipList(int MAXLVL, float P)
{
this->MAXLVL = MAXLVL;
this->P = P;
level = 0;

// create header node and initialize key to -1
header = new Node(-1, MAXLVL);
};

// create random level for node
int SkipList::randomLevel()
{
float r = (float)rand()/RAND_MAX;
int lvl = 0;
while(r < P && lvl < MAXLVL)
{
lvl++;
r = (float)rand()/RAND_MAX;
}
return lvl;
};

// create new node
Node* SkipList::createNode(int key, int level)
{
Node *n = new Node(key, level);
return n;
};

// Insert given key in skip list
void SkipList::insertElement(int key)
{
Node *current = header;

// create update array and initialize it
Node *update[MAXLVL+1];
memset(update, 0, sizeof(Node*)*(MAXLVL+1));

for(int i = level; i >= 0; i--)
{
while(current->forward[i] != NULL &&
current->forward[i]->key < key)
current = current->forward[i];
update[i] = current;
}

/* reached level 0 and forward pointer to
right, which is desired position to
insert key.
*/
current = current->forward[0];

if (current == NULL || current->key != key)
{
// Generate a random level for node
int rlevel = randomLevel();


if(rlevel > level)
{
for(int i=level+1;i<rlevel+1;i++)
update[i] = header;

// Update the list current level
level = rlevel;
}

// create new node with random level generated
Node* n = createNode(key, rlevel);

// insert node by rearranging pointers
for(int i=0;i<=rlevel;i++)
{
n->forward[i] = update[i]->forward[i];
update[i]->forward[i] = n;
}
cout<<"Successfully Inserted key "<<key<<"\n";
}
};

// Delete element from skip list
void SkipList::deleteElement(int key)
{
Node *current = header;

// create update array and initialize it
Node *update[MAXLVL+1];
memset(update, 0, sizeof(Node*)*(MAXLVL+1));


for(int i = level; i >= 0; i--)
{
while(current->forward[i] != NULL &&
current->forward[i]->key < key)
current = current->forward[i];
update[i] = current;
}

/* reached level 0 and forward pointer to
right, which is possibly our desired node.*/
current = current->forward[0];

// If current node is target node
if(current != NULL and current->key == key)
{

for(int i=0;i<=level;i++)
{

if(update[i]->forward[i] != current)
break;

update[i]->forward[i] = current->forward[i];
}

// Remove levels having no elements
while(level>0 &&
header->forward[level] == 0)
level--;
cout<<"Successfully deleted key "<<key<<"\n";
}
};

// Search for element in skip list
void SkipList::searchElement(int key)
{
Node *current = header;


for(int i = level; i >= 0; i--)
{
while(current->forward[i] &&
current->forward[i]->key < key)
current = current->forward[i];

}

/* reached level 0 and advance pointer to
right, which is possibly our desired node*/
current = current->forward[0];

// If current node have key equal to
// search key, we have found our target node
if(current and current->key == key)
cout<<"Found key: "<<key<<"\n";
};

// Display skip list level wise
void SkipList::displayList()
{
cout<<"\n*****Skip List*****"<<"\n";
for(int i=0;i<=level;i++)
{
Node *node = header->forward[i];
cout<<"Level "<<i<<": ";
while(node != NULL)
{
cout<<node->key<<" ";
node = node->forward[i];
}
cout<<"\n";
}
};

// Driver to test above code
int main()
{
// Seed random number generator
srand((unsigned)time(0));

// create SkipList object with MAXLVL and P
SkipList lst(3, 0.5);
int n;

do{
        cout<<"1.To insert new Node\n2.To Delete Node\n3.To search element in the list\n4.To display List\n5.Exit\n";
        cout<<"\nEnter your choice: ";
        cin>>n;
        switch(n)
        {
            case 1: int data;
                    cout<<"\nEnter element to insert: ";
                    cin>>data;
                    lst.insertElement(data);
                    break;

            case 2: int deldata;
                    cout<<"\nEnter which element to delete: ";
                    cin>>deldata;
                    lst.deleteElement(deldata);
                    break;

            case 3: int serdata;
                    cout<<"\nEnter which element to search: ";
                    cin>>serdata;
                    lst.searchElement(serdata);
                    break;

            case 4: lst.displayList();
                    break;

            case 5: cout<<"\nThank You !";
                    return 0;

            default: cout<<"Wrong choice! Enter again\n";
                     break;
        }
}while(n!=5);


}
